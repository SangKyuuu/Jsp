/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.43
 * Generated at: 2025-07-28 05:39:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class _1_005frequest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("	<head>\r\n");
      out.write("		<meta charset=\"UTF-8\">\r\n");
      out.write("		<title>JSP 내장객체 - request</title>\r\n");
      out.write("		<!-- \r\n");
      out.write("			25/07/28\r\n");
      out.write("			최상규\r\n");
      out.write("			JSP 내장객체 request 실습하기\r\n");
      out.write("			\r\n");
      out.write("			Request 내장객체\r\n");
      out.write("			- 클라이언트의 요청 정보를 갖는 JSP 내장객체\r\n");
      out.write("			- 클라이언트의 전송 데이터를 수신처리하는 기능 제공\r\n");
      out.write("			\r\n");
      out.write("			GET요청\r\n");
      out.write("			- 기본 데이터 요청 방식, 전송데이터를 쿼리스트링으로 전송(URL주소에 붙여 전송 ?key = value& )\r\n");
      out.write("			- 보안에 취약하지만 POST전송 대비 빠른 전송\r\n");
      out.write("			\r\n");
      out.write("			POST요청\r\n");
      out.write("			- 전송 데이터를 요청객체의 body에 저장해서 전송되는 방식\r\n");
      out.write("			- 보안에 유리하고 대량의 데이터 전송에 적합\r\n");
      out.write("		 -->\r\n");
      out.write("	</head>\r\n");
      out.write("	<body>\r\n");
      out.write("		<h3>JSP 내장객체 - request</h3>\r\n");
      out.write("		\r\n");
      out.write("		<h4>GET 요청</h4>\r\n");
      out.write("		<a href=\"./proc/result1.jsp?uid=a101\">요청1</a>\r\n");
      out.write("		<a href=\"./proc/result1.jsp?uid=a102&name=홍길동\">요청2</a>\r\n");
      out.write("		<a href=\"./proc/result1.jsp?uid=a103&name=김유신&age=23\">요청3</a>\r\n");
      out.write("		\r\n");
      out.write("		<h4>POST요청</h4>\r\n");
      out.write("		<form action=\"./proc/result2.jsp\" method=\"post\">\r\n");
      out.write("			<table border=\"1\">\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>아이디</td>\r\n");
      out.write("					<td><input type=\"text\" name=\"uid\" placeholder = \"아이디를 입력 하세요.\" /></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>이름</td>\r\n");
      out.write("					<td><input type=\"text\" name=\"name\" placeholder = \"이름을 입력 하세요.\" /></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>생년월일</td>\r\n");
      out.write("					<td><input type=\"date\" name=\"birth\" /></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td colspan=\"2\" align = \"right\">\r\n");
      out.write("						<input type=\"submit\" value = \"전송\" />\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("			</table>\r\n");
      out.write("		</form>\r\n");
      out.write("		\r\n");
      out.write("		<h4>확인문제</h4>\r\n");
      out.write("		<form action=\"./proc/result3.jsp\" method=\"post\">\r\n");
      out.write("			<table border=\"1\">\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>아이디</td>\r\n");
      out.write("					<td><input type=\"text\" name=\"id\" placeholder=\"아이디 입력\"/></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>비밀번호</td>\r\n");
      out.write("					<td><input type=\"password\" name=\"pw\" placeholder=\"비밀번호 입력\"/></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>이름</td>\r\n");
      out.write("					<td><input type=\"text\" name=\"name\" placeholder=\"이름 입력\"/></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>생년월일</td>\r\n");
      out.write("					<td><input type=\"date\" name=\"birth\" /></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>성별</td>\r\n");
      out.write("					<td>\r\n");
      out.write("						<label><input type=\"radio\" name=\"gender\" value=\"남자\"/>남자</label>\r\n");
      out.write("						<label><input type=\"radio\" name=\"gender\" value=\"여자\"/>여자</label>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>\r\n");
      out.write("						<select name = \"address\">\r\n");
      out.write("							<option>서울</option>\r\n");
      out.write("							<option>대전</option>\r\n");
      out.write("							<option>대구</option>\r\n");
      out.write("							<option>부산</option>\r\n");
      out.write("							<option>광주</option>\r\n");
      out.write("						</select>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>취미</td>\r\n");
      out.write("					<td>\r\n");
      out.write("						<label><input type=\"checkbox\" name=\"hobby\" value=\"등산\"/>등산</label>\r\n");
      out.write("						<label><input type=\"checkbox\" name=\"hobby\" value=\"운동\"/>운동</label>\r\n");
      out.write("						<label><input type=\"checkbox\" name=\"hobby\" value=\"여행\"/>여행</label>\r\n");
      out.write("						<label><input type=\"checkbox\" name=\"hobby\" value=\"독서\"/>독서</label>\r\n");
      out.write("						<label><input type=\"checkbox\" name=\"hobby\" value=\"게임\"/>게임</label>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td colspan=\"2\" align = \"right\">\r\n");
      out.write("						<input type=\"submit\" value = \"전송\" />\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("			</table>\r\n");
      out.write("		</form>\r\n");
      out.write("		\r\n");
      out.write("		<h4>request 자주 사용하는 클라이언트 정보</h4>\r\n");
      out.write("		<p>\r\n");
      out.write("			헤더정보 #1 : ");
      out.print(request.getHeader("User-Agent") );
      out.write("<br/>\r\n");
      out.write("			헤더정보 #2 : ");
      out.print(request.getHeader("referer") );
      out.write("<br/>\r\n");
      out.write("			헤더정보 #3 : ");
      out.print(request.getHeader("cookie") );
      out.write("<br/>\r\n");
      out.write("			프로토콜  : ");
      out.print(request.getProtocol() );
      out.write("<br/>\r\n");
      out.write("			서버이름  : ");
      out.print(request.getServerName() );
      out.write("<br/>\r\n");
      out.write("			서버포트  : ");
      out.print(request.getServerPort() );
      out.write("<br/>\r\n");
      out.write("			요청주소  : ");
      out.print(request.getRequestURL() );
      out.write("<br/>\r\n");
      out.write("			요청경로  : ");
      out.print(request.getRequestURI() );
      out.write("<br/>\r\n");
      out.write("			IP 주소  : ");
      out.print(request.getRemoteAddr() );
      out.write("<br/>\r\n");
      out.write("		</p>\r\n");
      out.write("		\r\n");
      out.write("	</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
